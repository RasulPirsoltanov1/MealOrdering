@page "/user/add"
@page "/user/update/{UserId:guid}"
@using MealOrdering.Client.Utils;
@using MealOrdering.Shared.CustomExceptions;
@using MealOrdering.Shared.DTOs;
@using MealOrdering.Shared.ResponseModels;

@UserId
<EditForm Model="userDTO" OnValidSubmit="ValidSubmit">
    <div class="row">
        <div class="form-group col-md-6">
            <label for="firstName">First Name</label>
            <InputText @bind-Value="userDTO.FirstName" class="form-control" id="firstName" />
            <ValidationMessage For="(()=>userDTO.FirstName)" class="text-danger" />
        </div>
        <div class="form-group col-md-6">
            <label for="lastName">Last Name</label>
            <InputText @bind-Value="userDTO.LastName" class="form-control" id="lastName" />
            <ValidationMessage For="(()=>userDTO.LastName)" class="text-danger" />
        </div>
    </div>

    <div class="row">
        <div class="form-group col-md-6">
            <label for="email">Email</label>
            <InputText @bind-Value="userDTO.Email" class="form-control" id="email" />
            <ValidationMessage For="(()=>userDTO.Email)" class="text-danger" />
        </div>
        <div class="form-group col-md-6">
            <label for="password">Password</label>
            <InputText @bind-Value="userDTO.Password" class="form-control" id="password" />
            <ValidationMessage For="(()=>userDTO.Password)" class="text-danger" />
        </div>
    </div>

    <div class="row">
        <div class="form-group col-md-6">
            <label class="form-check-label" for="checkStatuss">User Status</label>
            <InputCheckbox @bind-Value="userDTO.IsActive" id="checkStatuss" class="form-check-input" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
    <SaveButtonComponent></SaveButtonComponent>
        <CancelButtonComponent OnClick="Cancel"></CancelButtonComponent>
        </div>
    </div>
</EditForm>

@code {
    [Inject]
    public HttpClient _httpClient { get; set; }
    [Parameter]
    public Guid? UserId { get; set; }
    [Inject]
    NavigationManager _navigationManager { get; set; }
    private UserDTO userDTO = new UserDTO();
    [Inject]
    private ModalManager _modalManager { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (UserId != null && UserId != Guid.Empty)
        {
            var request = await _httpClient.GetFromJsonAsync<ServiceResponse<UserDTO>>($"api/user/GetById/{UserId}");
            userDTO = request.Value;
        }
    }
    public async Task ValidSubmit()
    {
        try
        {
            if (UserId != null && UserId != Guid.Empty)
            {
                await _httpClient.PostServiceResponseAsync<UserDTO, UserDTO>("api/user/update", userDTO);
            }
            else
            {
                await _httpClient.PostServiceResponseAsync<UserDTO, UserDTO>("api/user/create", userDTO);
            }
            _navigationManager.NavigateTo("userlist");
        }
        catch (ApiException ex)
        {
            await _modalManager.ShowMessage("post error", ex.Message);
        }
        catch (Exception ex)
        {
            await _modalManager.ShowMessage("message", ex.Message);
        }
    }
    public void Cancel()
    {
        _navigationManager.NavigateTo("/userlist");
    }
}
